name: CD Pipeline

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      version:
        description: 'Version to deploy'
        required: false
        type: string

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      version: ${{ steps.version.outputs.version }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract version
      id: version
      run: |
        if [ "${{ github.event.inputs.version }}" != "" ]; then
          echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        elif [[ ${{ github.ref }} == refs/tags/* ]]; then
          echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        else
          echo "version=${GITHUB_SHA:0:8}" >> $GITHUB_OUTPUT
        fi

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-docker
    environment: 
      name: staging
      url: https://staging.example.com
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to Staging
      uses: ./.github/actions/deploy-environment
      with:
        environment: staging
        image-tag: ${{ needs.build-docker.outputs.image-tag }}
        kube-config: ${{ secrets.STAGING_KUBECONFIG }}
        namespace: staging

    - name: Run smoke tests
      run: |
        echo "Running smoke tests against staging..."
        # Add your smoke test commands here
        npm run test:smoke -- --url=https://staging.example.com

    - name: Notify deployment
      uses: ./.github/actions/notify-team
      with:
        status: success
        message: 'Successfully deployed to staging environment'

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: 
      - build-docker
      - deploy-staging
    environment: 
      name: production
      url: https://example.com
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Wait for approval
      uses: trstringer/manual-approval@v1
      with:
        secret: ${{ github.TOKEN }}
        approvers: ${{ vars.PRODUCTION_APPROVERS }}
        minimum-approvals: 1

    - name: Deploy to Production
      uses: ./.github/actions/deploy-environment
      with:
        environment: production
        image-tag: ${{ needs.build-docker.outputs.image-tag }}
        kube-config: ${{ secrets.PRODUCTION_KUBECONFIG }}
        namespace: production

    - name: Run integration tests
      run: |
        echo "Running integration tests against production..."
        npm run test:integration -- --url=https://example.com

    - name: Notify deployment
      uses: ./.github/actions/notify-team
      with:
        status: success
        message: 'Successfully deployed to production environment'